---
title: "API Etkileşimi ve Veri Yönetimi"
description: "Backend-frontend veri alışverişi, TanStack Query ve Axios entegrasyonu kuralları"
glob_patterns: ["frontend/src/hooks/api/**/*.ts", "frontend/src/services/**/*.ts"]
---
# API Etkileşimi ve Veri Yönetimi

Bu proje, frontend ve backend arasındaki veri alışverişini düzgün bir şekilde yönetmek için belirli kurallar içermektedir.

## Temel API Servis Yapısı
- [frontend/src/services/api.service.ts](mdc:frontend/src/services/api.service.ts) - Axios ile tüm API isteklerinin temel yapıtaşıdır
- [frontend/src/services/adapter.service.ts](mdc:frontend/src/services/adapter.service.ts) - Backend-Frontend veri dönüşümleri için adapter
- [frontend/src/services/quiz.service.ts](mdc:frontend/src/services/quiz.service.ts) - Sınav API istekleri
- [frontend/src/services/auth.service.ts](mdc:frontend/src/services/auth.service.ts) - Kimlik doğrulama işlemleri
- [frontend/src/services/course.service.ts](mdc:frontend/src/services/course.service.ts) - Kurs API istekleri
- [frontend/src/services/document.service.ts](mdc:frontend/src/services/document.service.ts) - Doküman API istekleri

## API Çağrıları İçin Kurallar
1. **Gerçek Backend Kullanımı:** Mock veri kullanmak yerine, gerçek NestJS backend API'sini kullanmalısınız
2. **Servis Katmanı:** Tüm API istekleri ilgili servis dosyası üzerinden yapılmalıdır
3. **DTO Uyumu:** Frontend'deki tipler backend DTO'ları ile uyumlu olmalıdır, referans: [backend/src/](mdc:backend/src)
4. **Kimlik Doğrulama:** API isteklerinde kimlik doğrulama token'ları `api.service.ts` interceptor'ları tarafından otomatik eklenir
5. **Adapter Pattern:** Backend'den gelen ve backend'e gönderilen veriler adapter service ile dönüştürülmelidir

## TanStack Query (React Query) Kullanımı

TanStack Query 5, API veri yönetimi, önbellekleme ve yeniden doğrulama için tercih edilen kütüphanedir.

### Veri Çekme (useQuery)

```typescript
// useQuizQuery.ts
export const useQuiz = (
  id: string, 
  { enabled = true, config }: UseQuizOptions = {}
) => {
  return useQuery<Quiz>({
    queryKey: ["quiz", id],
    queryFn: async () => {
      const apiQuiz = await quizService.getQuizById(id);
      if (!apiQuiz || typeof apiQuiz !== "object")
        throw new Error("API'den beklenen quiz gelmedi");
      // DTO dönüşümü için adapter service kullanımı
      return adapterService.toQuiz(apiQuiz as ApiQuiz);
    },
    enabled: enabled && !!id,
    staleTime: 1000 * 60 * 5, // 5 dakika
    ...config,
  });
};
```

### Veri Manipülasyonu (useMutation)

```typescript
// useQuizMutation.ts
export const useSubmitQuiz = (
  options?: UseMutationOptions<Quiz, Error, QuizSubmissionPayload>
) => {
  const queryClient = useQueryClient();

  return useMutation<Quiz, Error, QuizSubmissionPayload>({
    mutationFn: async (payload: QuizSubmissionPayload) => {
      const apiQuiz = await quizService.submitQuiz(payload);
      if (!apiQuiz || typeof apiQuiz !== "object")
        throw new Error("API'den beklenen quiz gelmedi");
      return adapterService.toQuiz(apiQuiz as ApiQuiz);
    },
    onSuccess: (data, variables, context) => {
      // İlgili önbellekleri otomatik güncelle
      queryClient.setQueryData(["quiz", data.id], data);
      queryClient.invalidateQueries({ queryKey: ["quizzes"] });
      
      // Kullanıcı tanımlı onSuccess callback'i çağır
      if (options?.onSuccess) {
        options.onSuccess(data, variables, context);
      }
    },
    ...options,
  });
};
```

## Axios İstemci Yapılandırması

```typescript
// api.service.ts
import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api';

const apiClient = axios.create({
  baseURL: API_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// İstek interceptor'ı (tokenları ekle)
apiClient.interceptors.request.use(
  (config) => {
    const token = getAuthToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Yanıt interceptor'ı (hataları işle)
apiClient.interceptors.response.use(
  (response) => response,
  (error: AxiosError) => {
    // Hata işleme mantığı
    return Promise.reject(error);
  }
);

export default apiClient;
```

## Veri Çekme Stratejileri
- **Server Components:** Kritik ve SEO verilerini server component'larda `async/await` ile servis fonksiyonlarını çağırarak çekin
- **Client Components:** TanStack Query (React Query) kullanarak veri önbelleğe alma, yenileme ve durum yönetimi yapın
- **Custom Data Hooks:** TanStack Query ile veri çekme işlemlerini [frontend/src/hooks/](mdc:frontend/src/hooks) altında özel hook'lara çıkarın

## Adapter Pattern Kullanımı

Backend'den gelen veri yapıları ile frontend'de kullanılan veri yapıları farklı olabilir. Bu dönüşümü yönetmek için adapter pattern kullanılır:

```typescript
// adapter.service.ts
export const toQuiz = (apiQuiz: ApiQuiz): Quiz => {
  return {
    id: apiQuiz.id,
    title: apiQuiz.title,
    type: apiQuiz.type,
    status: apiQuiz.status,
    score: apiQuiz.score ?? 0,
    totalQuestions: apiQuiz.totalQuestions,
    correctAnswers: apiQuiz.correctAnswers ?? 0,
    // ... diğer dönüşümler
    questions: apiQuiz.questions ? apiQuiz.questions.map(toQuestion) : [],
    createdAt: new Date(apiQuiz.createdAt),
    completedAt: apiQuiz.completedAt ? new Date(apiQuiz.completedAt) : undefined,
  };
};

export const fromQuizSubmission = (submission: QuizSubmissionPayload): ApiQuizSubmissionPayload => {
  return {
    quizId: submission.quizId,
    answers: submission.answers.map(answer => ({
      questionId: answer.questionId,
      selectedOptionIds: answer.selectedOptionIds,
      timeSpentSeconds: answer.timeSpentSeconds,
    })),
  };
};
```

## Hata Yönetimi
- **Error Service:** [frontend/src/services/error.service.ts](mdc:frontend/src/services/error.service.ts) API hatalarını yönetmek ve loglamak için kullanılmalıdır
- **Hata Kurtarma:** API istekleri başarısız olduğunda kullanıcıya anlamlı hatalar gösterilmelidir
- **Yükleme Durumları:** Veri çekme işlemleri sırasında kullanıcıya yükleme durumları gösterilmelidir
- **TanStack Query Hata Yönetimi:** useQuery ve useMutation hook'larının error, isError, isLoading durumlarını kullanın

```typescript
const { data, isLoading, isError, error } = useQuiz(quizId);

if (isLoading) return <Loading />;
if (isError) return <ErrorDisplay message={error.message} />;

return <QuizDisplay quiz={data} />
```

